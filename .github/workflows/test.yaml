name: test
# either manually started, or on a schedule
on: [ push, workflow_dispatch ]
jobs:
  test:
    # ubuntu
    runs-on: ubuntu-latest
    steps:
    # need the repo checked out
    - name: checkout repo
      uses: actions/checkout@v3

    # install oss fpga tools
    - name: install oss-cad-suite
      uses: YosysHQ/setup-oss-cad-suite@v2
      with:
          python-override: true
          github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: prepare oss-cad-suite
      run: |
        [ -e /yosyshq ] || sudo ln -s $RUNNER_TEMP/oss-cad-suite /yosyshq || true

        if [ ! -e /yosyshq ]; then
          echo "WARNING: Unable to ensure setup of symlink /yosyshq, some things may not work as well as expected.  ln -s  $RUNNER_TEMP/oss-cad-suite /yosyshq" 1>&2
        fi

        echo "OSS_CAD_SUITE_HOME=$OSS_CAD_SUITE_HOME"
        test -n "$OSS_CAD_SUITE_HOME" || export OSS_CAD_SUITE_HOME="$RUNNER_TEMP/oss-cad-suite"
        echo "OSS_CAD_SUITE_HOME=$OSS_CAD_SUITE_HOME"
        echo "OSS_CAD_SUITE_HOME=$OSS_CAD_SUITE_HOME" >> $GITHUB_ENV

        if [ ! -e "$OSS_CAD_SUITE_HOME" ]; then
          echo "WARNING: \$OSS_CAD_SUITE_HOME not setup" 1>&2
        fi

        sudo -E apt-get install -y libffi7

        yosys --version
        iverilog -V
        cocotb-config --libpython
        cocotb-config --python-bin

    - name: patch
      run: |
        cd src

        ./check_verilog_timerconsts.sh || true

        echo "### Temporary patch remove before production and signoff"
        echo "### For local simulation these timers values are 1/200th or 1/25th of the normal wall-clock time"
        echo "### This patch restores the production values to meet USB specification with a 48MHz PHY clock source"

        ./check_verilog_timerconsts.sh patch quiet

        echo ""
        echo "### This now validates the values inside verilog are production system values or halts the CI"

        ./check_verilog_timerconsts.sh

    - name: test FULL_SPEED
      run: |
        cd src

        export DEBUG=true
        unset LOW_SPEED
        make clean
        make

        mv results.xml results_fs.xml
        mv tb.vcd tb_fs.vcd

        # make will return success even if the test fails, so check for failure in the results.xml
        ! grep failure results_fs.xml

    - name: test LOW_SPEED
      run: |
        cd src

        export DEBUG=true
        export LOW_SPEED=true
        make clean
        make

        mv results.xml results_ls.xml
        mv tb.vcd tb_ls.vcd

        # make will return success even if the test fails, so check for failure in the results.xml
        ! grep failure results_ls.xml

    - name: upload vcd
      if: success() || failure()
      uses: actions/upload-artifact@v3
      with:
          name: test-vcd
          path: src/tb*.vcd

